version: "2"
services:
{{#if webContainer}}
  web:
  {{#if_eq webImage 'php'}}
    build:
      context: .docker/php
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy}
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/var/www/html"
      - "composer-cache:/composer/cache"
  {{/if_eq ~}}
{{/if ~}}
{{#if dbContainer}}
  db:
  {{#if_eq dbImage 'postgres'}}
    build:
      context: .docker/postgres
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      - POSTGRES_USER={{projectName}}
      - POSTGRES_PASSWORD={{projectName}}
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/workdir" # Mount this volume to help loading/exporting dumps
      - "postgresql:/var/lib/postgresql/data"
  {{/if_eq ~}}
  {{#if_eq dbImage 'mysql'}}
    build:
      context: .docker/mysql
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      - MYSQL_ROOT_PASSWORD={{projectName}}
      - MYSQL_DATABASE={{projectName}}
      - MYSQL_USER={{projectName}}
      - MYSQL_PASSWORD={{projectName}}
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/workdir" # Mount this volume to help loading/exporting dumps
      - "mysql:/var/lib/mysql/"
  {{/if_eq ~}}
{{/if ~}}
{{#if nodeSassContainer}}
  node-sass:
    build:
      context: .docker/node-sass
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy}
    entrypoint: "/bin/true"
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/app"
      - "${COMPOSE_PROJECT_DIR}/.phing:/build"
    privileged: true
{{/if ~}}
{{#if nodeContainer}}
  node:
    build:
      context: .docker/node
      args:
        http_proxy: "${http_proxy}"
        https_proxy: "${https_proxy}"
    environment:
      http_proxy: "${http_proxy}"
      https_proxy: "${https_proxy}"
      no_proxy: "localhost,127.0.0.1{{#if webContainer}},web{{/if}},{{#if dbContainer}}db{{/if}},{{#if mapserverContainer}}mapserver{{/if}}"
    volumes:
      - ".:/app"
      - "node-cache:/home/node/.cache"
{{/if ~}}
{{#if phingContainer}}
  builder:
    build:
      context: .docker/phing
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy}
      - COMPOSE_PROJECT_DIR=${COMPOSE_PROJECT_DIR}
      - BUILD_WORKING_DIR=/app
    privileged: true
    working_dir: "/app"
    entrypoint: "/bin/true"
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/app"
      - "/var/run/docker.sock:/var/run/docker.sock"
{{/if ~}}
{{#if mapserverContainer}}
  mapserver:
    build:
      context: .docker/mapserver
      args:
        http_proxy: "${http_proxy}"
        https_proxy: "${https_proxy}"
        no_proxy: ${no_proxy}
    environment:
      http_proxy: "${http_proxy}"
      https_proxy: "${https_proxy}"
      no_proxy: "${no_proxy}{{#if webContainer}},web{{/if}}{{#if dbContainer}},db{{/if}},mapserver"
    volumes:
      - "${COMPOSE_PROJECT_DIR}/mapserver:/etc/mapserver"
{{/if ~}}
volumes:
{{#if_eq webImage 'php'}}
  composer-cache: ~
{{/if_eq ~}}
{{#if_eq dbImage 'postgres'}}
  postgresql: ~
{{/if_eq ~}}
{{#if_eq dbImage 'mysql'}}
  mysql: ~
{{/if_eq ~}}
{{#if nodeContainer}}
  node-cache: ~
{{/if}}
