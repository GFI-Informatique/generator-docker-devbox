version: "2.2"
services:
{{#if webContainer}}
  web:
  {{#if_eq webImage 'php'}}
    build:
      context: .docker
      dockerfile: php/Dockerfile
    init: true
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/var/www/html"
      - "composer-cache:/composer/cache"
      - "${COMPOSE_PROJECT_DIR}/.docker/php/apache.conf:/etc/apache2/sites-enabled/000-default.conf"
  {{/if_eq ~}}
{{/if ~}}
{{#if dbContainer}}
  db:
  {{#if_eq dbImage 'postgres'}}
    build:
      context: .docker
      dockerfile: postgres/Dockerfile
    init: true
    environment:
      - POSTGRES_USER={{projectName}}
      - POSTGRES_PASSWORD={{projectName}}
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/workdir" # Mount this volume to help loading/exporting dumps
      - "postgresql:/var/lib/postgresql/data"
  {{/if_eq ~}}
  {{#if_eq dbImage 'mysql'}}
    build:
      context: .docker
      dockerfile: mysql/Dockerfile
    init: true
    environment:
      - MYSQL_ROOT_PASSWORD={{projectName}}
      - MYSQL_DATABASE={{projectName}}
      - MYSQL_USER={{projectName}}
      - MYSQL_PASSWORD={{projectName}}
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/workdir" # Mount this volume to help loading/exporting dumps
      - "mysql:/var/lib/mysql/"
  {{/if_eq ~}}
{{/if ~}}
{{#if nodeSassContainer}}
  node-sass:
    build:
      context: .docker
      dockerfile: node-sass/Dockerfile
      args:
        GROUP_ID: "${GROUP_ID}"
        USER_ID: "${USER_ID}"
    init: true
    entrypoint: "/bin/true"
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/app"
      - "node-sass-cache:/home/node/.cache"
      - "node-sass-npm-packages:/home/node/.npm-packages"
{{#if phingContainer}}
      - "${COMPOSE_PROJECT_DIR}/.phing:/build"
{{/if ~}}
{{/if ~}}
{{#if nodeContainer}}
  node:
    build:
      context: .docker
      dockerfile: node/Dockerfile
      args:
        GROUP_ID: "${GROUP_ID}"
        USER_ID: "${USER_ID}"
    init: true
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/app"
      - "node-cache:/home/node/.cache"
      - "node-npm-packages:/home/node/.npm-packages"
{{/if ~}}
{{#if phingContainer}}
  phing:
    build:
      context: .docker
      dockerfile: phing/Dockerfile
      args:
        DOCKER_VERSION: ${DOCKER_VERSION}
        DOCKER_COMPOSE_VERSION: ${DOCKER_COMPOSE_VERSION}
    init: true
    environment:
      - COMPOSE_PROJECT_DIR=${COMPOSE_PROJECT_DIR}
      - BUILD_WORKING_DIR=/app
    privileged: true
    working_dir: "/app"
    entrypoint: "/bin/true"
    volumes:
      - "${COMPOSE_PROJECT_DIR}:/app"
      - "/var/run/docker.sock:/var/run/docker.sock"
{{/if ~}}
{{#if mapserverContainer}}
  mapserver:
    build:
      context: .docker
      dockerfile: mapserver/Dockerfile
    init: true
    volumes:
      - "${COMPOSE_PROJECT_DIR}/mapserver:/etc/mapserver"
    user: "${USER_ID}"
{{/if ~}}
volumes:
{{#if_eq webImage 'php'}}
  composer-cache: ~
{{/if_eq ~}}
{{#if_eq dbImage 'postgres'}}
  postgresql: ~
{{/if_eq ~}}
{{#if_eq dbImage 'mysql'}}
  mysql: ~
{{/if_eq ~}}
{{#if nodeContainer}}
  node-cache: ~
  node-npm-packages: ~
{{/if}}
{{#if nodeSassContainer}}
  node-sass-cache: ~
  node-sass-npm-packages: ~
{{/if}}
